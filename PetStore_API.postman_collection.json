{
	"info": {
		"_postman_id": "a4f3419e-c76c-44c6-98aa-ee19652d7625",
		"name": "PetStore_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48223841"
	},
	"item": [
		{
			"name": "Create Pet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let petIndex = parseInt(pm.environment.get(\"petIndex\") || \"0\");\r",
							"const totalPets = 3;\r",
							"\r",
							"if (petIndex < totalPets) {\r",
							"    // Generating random values\r",
							"    const newPetId = Math.floor(Math.random() * 9000) + 1000;\r",
							"    pm.environment.set(\"petId\", newPetId);\r",
							"\r",
							"    const names = [\"doggie\", \"kitty\", \"parrot\", \"bunny\"];\r",
							"    const randomName = names[Math.floor(Math.random() * names.length)] + \"_\" + Math.floor(Math.random() * 1000);\r",
							"    pm.environment.set(\"randomName\", randomName);\r",
							"\r",
							"    // const img = pm.variables.replaceIn(\"{{$randomAnimalsImage}}\");\r",
							"    // pm.environment.set(\"photoUrl\", img);\r",
							"\r",
							"    pm.environment.set(\"categoryId\", Math.floor(Math.random() * 100));\r",
							"    pm.environment.set(\"tagId\", Math.floor(Math.random() * 100));\r",
							"\r",
							"    // Store created pet IDs for later deletion\r",
							"    const allPetIds = JSON.parse(pm.environment.get(\"allPetIds\") || \"[]\");\r",
							"    allPetIds.push(newPetId);\r",
							"    pm.environment.set(\"allPetIds\", JSON.stringify(allPetIds));\r",
							"\r",
							"    pm.environment.set(\"petIndex\", petIndex + 1);\r",
							"\r",
							"} else {\r",
							"    pm.execution.setNextRequest(null);\r",
							"}\r",
							"\r",
							"// pm.environment.set(\"petId\", Math.floor(Math.random() * 9000) + 1000);\r",
							"\r",
							"// const names = [\"doggie\", \"kitty\", \"parrot\", \"bunny\"];\r",
							"// const randomName = names[Math.floor(Math.random() * names.length)] + \"_\" + Math.floor(Math.random() * 1000);\r",
							"// pm.environment.set(\"randomName\", randomName);\r",
							"\r",
							"// pm.environment.set(\"categoryId\", Math.floor(Math.random() * 100));\r",
							"// pm.environment.set(\"tagId\", Math.floor(Math.random() * 100));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"    \r",
							"const res = pm.response.json();\r",
							"pm.test(\"ID matches request\", () => {\r",
							"    pm.expect(res.id).to.eql(parseInt(pm.environment.get(\"petId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Name matches requested name\", () => {\r",
							"  pm.expect(res.name).to.eql(pm.environment.get(\"randomName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Fast response (<700ms)\", () => pm.expect(pm.response.responseTime).to.be.below(700));\r",
							"\r",
							"// JSON Schema \r",
							"const createSchema = {\r",
							"  type: \"object\",\r",
							"  required: [\"id\",\"name\",\"status\"],\r",
							"  properties: {\r",
							"    id: { type: \"integer\" },\r",
							"    name: { type: \"string\", minLength: 1 },\r",
							"    status: { type: \"string\", enum: [\"available\",\"pending\",\"sold\"] },\r",
							"    category: {\r",
							"      type: \"object\",\r",
							"      required: [\"id\",\"name\"],\r",
							"      properties: { id: {type:\"integer\"}, name: {type:\"string\"} }\r",
							"    },\r",
							"    tags: { type: \"array\" }\r",
							"  }\r",
							"};\r",
							"pm.test(\"Schema valid (create)\", () => pm.response.to.have.jsonSchema(createSchema));\r",
							"\r",
							"// Add current pet ID to allPetIds list\r",
							"const allPetIds = JSON.parse(pm.environment.get(\"allPetIds\") || \"[]\");\r",
							"allPetIds.push(res.id); // use ID returned by API\r",
							"pm.environment.set(\"allPetIds\", JSON.stringify(allPetIds));\r",
							"console.log(\"AllPetIds:\", allPetIds);\r",
							"\r",
							"const maxRetries = 2;\r",
							"let retry = parseInt(pm.variables.get(\"retry\") || \"0\");\r",
							"\r",
							"if ([429, 500, 502, 503, 504].includes(pm.response.code) && retry < maxRetries) {\r",
							"  retry++;\r",
							"  pm.variables.set(\"retry\", String(retry));\r",
							"  console.warn(\"Retrying \" + pm.info.requestName + \" attempt \" + retry);\r",
							"  pm.execution.setNextRequest(pm.info.requestName); // reruns same request\r",
							"} else {\r",
							"  pm.variables.unset(\"retry\"); // cleanup after success/final failure\r",
							"}\r",
							"\r",
							"pm.execution.setNextRequest(\"Get Pet\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{petId}},\r\n  \"category\": {\r\n    \"id\": {{categoryId}},\r\n    \"name\": \"animal\"\r\n  },\r\n  \"name\": \"{{randomName}}\",\r\n  \"photoUrls\": [\"string\"],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{tagId}},\r\n      \"name\": \"friendly\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/pet",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Pet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Deleting pet with ID: \" + pm.environment.get(\"petId\"));\r",
							"\r",
							"const allPetIds = JSON.parse(pm.environment.get(\"allPetIds\") || \"[]\");\r",
							"\r",
							"if (allPetIds.length) {\r",
							"    pm.environment.set(\"petId\", allPetIds.shift()); // Take the first pet ID for deletion\r",
							"    pm.environment.set(\"allPetIds\", JSON.stringify(allPetIds)); // Save the remaining IDs back\r",
							"} else {\r",
							"    pm.execution.setNextRequest(null); // stop if no pets left\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 204\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
							"});\r",
							"\r",
							"pm.test(\"Should be 404 after delete\", () => {\r",
							"  pm.expect(pm.response.code).to.be.oneOf([404,400]); // Petstore sometimes returns 404/400\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time < 800ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present or empty\", () => {\r",
							"    const contentType = pm.response.headers.get(\"Content-Type\") || \"\";\r",
							"    pm.expect(contentType).to.be.oneOf([\"\", \"application/json\"]);\r",
							"});\r",
							"\r",
							"// If there are still pets left, loop again\r",
							"const remainingPets = JSON.parse(pm.environment.get(\"allPetIds\") || \"[]\");\r",
							"if (remainingPets.length > 0) {\r",
							"    pm.execution.setNextRequest(\"DELETE Pet\");\r",
							"} else {\r",
							"    pm.execution.setNextRequest(null); \r",
							"}\r",
							"\r",
							"// pm.execution.setNextRequest(null); \r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/pet/{{petId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const allPetIds = JSON.parse(pm.environment.get(\"allPetIds\") || \"[]\");\r",
							"if (allPetIds.length > 0) {\r",
							"    let petIdToGet = allPetIds[0]; // get the first pet\r",
							"    pm.environment.set(\"petId\", petIdToGet);\r",
							"    console.log(\"Fetching pet ID:\", petIdToGet);\r",
							"} else {\r",
							"    pm.execution.setNextRequest(null); // stop if no pets left\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"\r",
							"pm.test(\"Content-Type exists\", () => pm.response.to.have.header(\"Content-Type\"));\r",
							"\r",
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Pet has all required fields\", function () {\r",
							"    pm.expect(res).to.have.property(\"id\");\r",
							"    pm.expect(res).to.have.property(\"name\");\r",
							"    pm.expect(res).to.have.property(\"status\");\r",
							"});\r",
							"\r",
							"pm.test(\"Pet name matches\", () => {\r",
							"    pm.expect(res.name).to.eql(pm.environment.get(\"randomName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Pet ID exists and is numeric\", () => {\r",
							"    pm.expect(res.id).to.be.a(\"number\");\r",
							"    pm.expect(res.id).to.eql(parseInt(pm.environment.get(\"petId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Pet status is valid\", function () {\r",
							"    pm.expect([\"available\", \"pending\", \"sold\"]).to.include(pm.response.json().status);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time < 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"const remainingPets = JSON.parse(pm.environment.get(\"allPetIds\") || \"[]\");\r",
							"\r",
							"// if GET failed\r",
							"if (pm.response.code !== 200) {\r",
							"    console.warn(\"GET failed; re-create pet.\");\r",
							"    pm.execution.setNextRequest(\"Create Pet\");\r",
							"} else {\r",
							"    // GET succeeded and JSON was parsed successfully\r",
							"    if (res && (res.status === \"sold\" || remainingPets.length === 0)) {\r",
							"        console.log(\"Pet already sold -> Go to Delete\");\r",
							"        pm.execution.setNextRequest(\"Delete Pet\");\r",
							"    } else {\r",
							"        console.log(\"Pet not sold -> Go to Update\");\r",
							"        pm.execution.setNextRequest(\"Update Pet\");\r",
							"    }\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/pet/{{petId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pet",
						"{{petId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Pet",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const updated = pm.environment.get(\"randomName\") + \"_updated\";\r",
							"pm.environment.set(\"updatedName\", updated);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", () => {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"const res = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Pet ID matches original\", () => {\r",
							"    pm.expect(res.id).to.eql(parseInt(pm.environment.get(\"petId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Pet name updated\", () => {\r",
							"    pm.expect(res.name).to.eql(pm.environment.get(\"updatedName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Status updated to pending\", () => {\r",
							"    pm.expect(res.status).to.eql(\"pending\");\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(\"Delete Pet\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{petId}},\r\n  \"category\": {\r\n    \"id\": {{categoryId}},\r\n    \"name\": \"dogs\"\r\n  },\r\n  \"name\": \"{{updatedName}}\",\r\n  \"photoUrls\": [\"string\"],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{tagId}},\r\n      \"name\": \"friendly\"\r\n    }\r\n  ],\r\n  \"status\": \"pending\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/pet",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"pet"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.request.headers.add({\r",
					"  key: \"api_key\",\r",
					"  value: \"special-key\"\r",
					"});\r",
					"\r",
					"// attach headers to all requests in collection\r",
					"pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
					"pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Collection-level retry logic\r",
					"const maxRetries = 2;\r",
					"let retry = parseInt(pm.variables.get(\"retry\") || \"0\");\r",
					"\r",
					"if ([429, 500, 502, 503, 504].includes(pm.response.code) && retry < maxRetries) {\r",
					"  retry++;\r",
					"  pm.variables.set(\"retry\", String(retry));\r",
					"  console.warn(\"Retrying \" + pm.info.requestName + \" attempt \" + retry);\r",
					"  pm.execution.setNextRequest(pm.info.requestName);\r",
					"} else {\r",
					"  pm.variables.unset(\"retry\");\r",
					"}\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": ""
		},
		{
			"value": "",
			"disabled": true
		}
	]
}